// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/ArthurHlt/go-xymon-client/client"
)

type FakeClient struct {
	StatusStub        func(client.MessageTest) (string, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		arg1 client.MessageTest
	}
	statusReturns struct {
		result1 string
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	QueryStub        func(client.MessageTest) (string, error)
	queryMutex       sync.RWMutex
	queryArgsForCall []struct {
		arg1 client.MessageTest
	}
	queryReturns struct {
		result1 string
		result2 error
	}
	queryReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PingStub        func() (string, error)
	pingMutex       sync.RWMutex
	pingArgsForCall []struct{}
	pingReturns     struct {
		result1 string
		result2 error
	}
	pingReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	EventStub        func(client.EventTest) (string, error)
	eventMutex       sync.RWMutex
	eventArgsForCall []struct {
		arg1 client.EventTest
	}
	eventReturns struct {
		result1 string
		result2 error
	}
	eventReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Status(arg1 client.MessageTest) (string, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		arg1 client.MessageTest
	}{arg1})
	fake.recordInvocation("Status", []interface{}{arg1})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeClient) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeClient) StatusArgsForCall(i int) client.MessageTest {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].arg1
}

func (fake *FakeClient) StatusReturns(result1 string, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) StatusReturnsOnCall(i int, result1 string, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Query(arg1 client.MessageTest) (string, error) {
	fake.queryMutex.Lock()
	ret, specificReturn := fake.queryReturnsOnCall[len(fake.queryArgsForCall)]
	fake.queryArgsForCall = append(fake.queryArgsForCall, struct {
		arg1 client.MessageTest
	}{arg1})
	fake.recordInvocation("Query", []interface{}{arg1})
	fake.queryMutex.Unlock()
	if fake.QueryStub != nil {
		return fake.QueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.queryReturns.result1, fake.queryReturns.result2
}

func (fake *FakeClient) QueryCallCount() int {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return len(fake.queryArgsForCall)
}

func (fake *FakeClient) QueryArgsForCall(i int) client.MessageTest {
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	return fake.queryArgsForCall[i].arg1
}

func (fake *FakeClient) QueryReturns(result1 string, result2 error) {
	fake.QueryStub = nil
	fake.queryReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) QueryReturnsOnCall(i int, result1 string, result2 error) {
	fake.QueryStub = nil
	if fake.queryReturnsOnCall == nil {
		fake.queryReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.queryReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Ping() (string, error) {
	fake.pingMutex.Lock()
	ret, specificReturn := fake.pingReturnsOnCall[len(fake.pingArgsForCall)]
	fake.pingArgsForCall = append(fake.pingArgsForCall, struct{}{})
	fake.recordInvocation("Ping", []interface{}{})
	fake.pingMutex.Unlock()
	if fake.PingStub != nil {
		return fake.PingStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.pingReturns.result1, fake.pingReturns.result2
}

func (fake *FakeClient) PingCallCount() int {
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	return len(fake.pingArgsForCall)
}

func (fake *FakeClient) PingReturns(result1 string, result2 error) {
	fake.PingStub = nil
	fake.pingReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PingReturnsOnCall(i int, result1 string, result2 error) {
	fake.PingStub = nil
	if fake.pingReturnsOnCall == nil {
		fake.pingReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.pingReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Event(arg1 client.EventTest) (string, error) {
	fake.eventMutex.Lock()
	ret, specificReturn := fake.eventReturnsOnCall[len(fake.eventArgsForCall)]
	fake.eventArgsForCall = append(fake.eventArgsForCall, struct {
		arg1 client.EventTest
	}{arg1})
	fake.recordInvocation("Event", []interface{}{arg1})
	fake.eventMutex.Unlock()
	if fake.EventStub != nil {
		return fake.EventStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.eventReturns.result1, fake.eventReturns.result2
}

func (fake *FakeClient) EventCallCount() int {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return len(fake.eventArgsForCall)
}

func (fake *FakeClient) EventArgsForCall(i int) client.EventTest {
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	return fake.eventArgsForCall[i].arg1
}

func (fake *FakeClient) EventReturns(result1 string, result2 error) {
	fake.EventStub = nil
	fake.eventReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) EventReturnsOnCall(i int, result1 string, result2 error) {
	fake.EventStub = nil
	if fake.eventReturnsOnCall == nil {
		fake.eventReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.eventReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	fake.queryMutex.RLock()
	defer fake.queryMutex.RUnlock()
	fake.pingMutex.RLock()
	defer fake.pingMutex.RUnlock()
	fake.eventMutex.RLock()
	defer fake.eventMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.Client = new(FakeClient)
